// schema.prisma
generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}


model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}


model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    clouds        Cloud[]  
    guesses       Guess[]  
}

model Cloud {
    id      String  @id @default(cuid()) @unique
    answer  String
    image   String
    filter  String
    user    User    @relation(fields: [userId], references: [id])
    userId  String
    guesses Guess[] 
    createdAt DateTime @default(now())
}

model Guess {
    id        String   @id @default(cuid()) @unique
    answer    String
    filter    String
    user      User     @relation(fields: [userId], references: [id])
    userId    String
    cloud     Cloud    @relation(fields: [cloudId], references: [id])
    cloudId   String
    createdAt DateTime @default(now())
    isCorrect Boolean  @default(false) 
}